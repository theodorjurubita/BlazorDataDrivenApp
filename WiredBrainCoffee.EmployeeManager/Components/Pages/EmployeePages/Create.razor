@page "/employees/create"
@using Microsoft.EntityFrameworkCore
@using WiredBrainCoffee.EmployeeManager.Data
@inject IDbContextFactory<WiredBrainCoffee.EmployeeManager.Data.EmployeeManagerDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Employee</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Employee" OnValidSubmit="AddEmployee" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="firstname" class="form-label">FirstName:</label>
                <InputText id="firstname" @bind-Value="Employee.FirstName" class="form-control" />
                <ValidationMessage For="() => Employee.FirstName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="lastname" class="form-label">LastName:</label>
                <InputText id="lastname" @bind-Value="Employee.LastName" class="form-control" />
                <ValidationMessage For="() => Employee.LastName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isdeveloper" class="form-label">IsDeveloper:</label>
                <InputCheckbox id="isdeveloper" @bind-Value="Employee.IsDeveloper" class="form-check-input" />
                <ValidationMessage For="() => Employee.IsDeveloper" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="department" class="form-label">Department:</label>
                <InputSelect id="department"
                             @bind-Value="Employee.DepartmentId" class="form-select">
                    <option>Select...</option>
                    @if (departments is not null)
                    {
                        @foreach (var department in departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => Employee.DepartmentId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    public Employee Employee { get; set; } = new();

    private Department[]? departments;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        departments = await context.Department.ToArrayAsync();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        context.Employee.Add(Employee);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/employees");
    }
}
